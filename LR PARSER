#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Global Variables
int z = 0, i = 0, j = 0, c = 0;

// Modify array size to increase length of string to be parsed
char a[16], ac[30], stk[15], act[10];

// Function to check for production rules
void check() {
    // Copying string to be printed as action
    strcpy(ac, "REDUCE TO E -> ");
    
    // Check for the production rule E -> 4
    for (z = 0; z < c; z++) {
        if (stk[z] == '4') {
            printf("%s4\n", ac);
            stk[z] = 'E'; // Replace '4' with 'E'
            stk[z + 1] = '\0'; // Null terminate the stack
            printf("\n$%s\t%s$\t", stk, a);
        }
    }

    // Check for the production rule E -> 2E2
    for (z = 0; z < c - 2; z++) {
        if (stk[z] == '2' && stk[z + 1] == 'E' && stk[z + 2] == '2') {
            printf("%s2E2\n", ac);
            stk[z] = 'E'; // Replace '2E2' with 'E'
            stk[z + 1] = '\0'; // Null terminate the stack
            stk[z + 2] = '\0'; // Null terminate the next character
            printf("\n$%s\t%s$\t", stk, a);
            i = i - 2; // Decrease index
        }
    }

    // Check for the production rule E -> 3E3
    for (z = 0; z < c - 2; z++) {
        if (stk[z] == '3' && stk[z + 1] == 'E' && stk[z + 2] == '3') {
            printf("%s3E3\n", ac);
            stk[z] = 'E'; // Replace '3E3' with 'E'
            stk[z + 1] = '\0'; // Null terminate the stack
            stk[z + 2] = '\0'; // Null terminate the next character
            printf("\n$%s\t%s$\t", stk, a);
            i = i - 2; // Decrease index
        }
    }
}

// Driver Function
int main() {
    printf("GRAMMAR is -\nE->2E2 \nE->3E3 \nE->4\n");

    // Input string
    strcpy(a, "32423");
    c = strlen(a); // Get the length of the input string
    strcpy(act, "SHIFT"); // Action for shifting

    // Print Labels (column names)
    printf("\nstack \t input \t action");
    printf("\n$\t%s$\t", a); // Initial values of stack and input

    // Run up to the length of the input string
    for (i = 0, j = 0; j < c; i++, j++) {
        // Print action
        printf("%s", act);
        // Push into stack
        stk[i] = a[j];
        stk[i + 1] = '\0'; // Null terminate the stack

        // Move the pointer a[j] to ' ' (indicating it has been processed)
        a[j] = ' '; // Replace processed character with space

        // Print action
        printf("\n$%s\t%s$\t", stk, a);

        // Call check function to verify the stack for any production
        check();
    }

    // Final check for acceptance
    if (stk[0] == 'E' && stk[1] == '\0') // If the top of the stack is E (start symbol)
        printf("Accept\n");
    else // Else reject
        printf("Reject\n");

    return 0;
}
