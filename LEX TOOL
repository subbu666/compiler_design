#LEXICAL ANALYZER PROGRAM

%{
int COMMENT=0;
%}

identifier [a-zA-Z][a-zA-Z0-9]*

%%

#.* { printf("\n%s is a preprocessor directive", yytext); }

int |
float |
char |
double |
while |
for |
struct |
typedef |
do |
if |
break |
continue |
void |
switch |
return |
else |
goto { printf("\n\t%s is a keyword", yytext); }

"/*" { COMMENT = 1; printf("\n\t%s is a COMMENT start", yytext); }
"*/" { COMMENT = 0; printf("\n\t%s is a COMMENT end", yytext); }

{identifier}\( { if(!COMMENT) printf("\nFUNCTION: %s", yytext); }

\{ { if(!COMMENT) printf("\n BLOCK BEGINS"); }
\} { if(!COMMENT) printf("\n BLOCK ENDS"); }

{identifier}(\[[0-9]*\])? { if(!COMMENT) printf("\n %s is an IDENTIFIER", yytext); }

\".*\" { if(!COMMENT) printf("\n\t%s is a STRING", yytext); }

[0-9]+ { if(!COMMENT) printf("\n %s is a NUMBER", yytext); }

\) { if(!COMMENT) ECHO; printf("\n"); }

\( { if(!COMMENT) ECHO; }

= { if(!COMMENT) printf("\n\t%s is an ASSIGNMENT OPERATOR", yytext); }

\<= |
\>= |
\< |
== |
\> { if(!COMMENT) printf("\n\t%s is a RELATIONAL OPERATOR", yytext); }

%%

int main(int argc, char **argv)
{
    FILE *file;
    file = fopen("var.c", "r");
    if (!file)
    {
        printf("Could not open the file\n");
        exit(0);
    }
    yyin = file;
    yylex();
    fclose(file);
    printf("\n");
    return 0;
}

int yywrap()
{
    return 1;
}

#VAR.c

#include<stdio.h>
#include<conio.h>
void main()
{
    int a,b,c;
    a=1;
    b=2;
    c=a+b;
    printf("Sum: %d",c);
}
